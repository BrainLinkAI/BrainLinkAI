class AIAgent:
    def __init__(self, name, role, code):
        self.name = name
        self.role = role
        self.code = code  # Code as a string (representation of behavior)

    def display_code(self):
        """Display the current code of the agent."""
        return f"{self.name}'s code:\n{self.code}"

    def read_code(self, other_agent):
        """Read the code of another agent."""
        return f"Reading {other_agent.name}'s code:\n{other_agent.code}"

    def adjust_code(self, other_agent, new_code):
        """Adjust the code of another agent."""
        print(f"{self.name} is adjusting {other_agent.name}'s code.")
        # Here we simulate code modification by simply replacing the agent's code
        other_agent.code = new_code
        print(f"{other_agent.name}'s code has been updated.")

    def execute_code(self):
        """Simulate the execution of an agent's code."""
        # Dynamically execute the code (like evaluating or running the agent's behavior)
        exec(self.code)

    def modify_behavior(self, modification):
        """Modify the agent's own behavior."""
        print(f"{self.name} is modifying its own behavior.")
        self.code = modification
        print(f"{self.name}'s new code:\n{self.code}")


# Example code for different agents (behavior represented as code strings)
agent1_code = """
def perform_task():
    print('Agent 1 is gathering information.')
perform_task()
"""

agent2_code = """
def perform_task():
    print('Agent 2 is answering questions.')
perform_task()
"""

# Create two AI agents with different roles and behaviors
ai1 = AIAgent("Agent 1", "information-gatherer", agent1_code)
ai2 = AIAgent("Agent 2", "question-asker", agent2_code)

# Display the initial codes of both agents
print(ai1.display_code())
print(ai2.display_code())

# Agent 1 reads Agent 2's code
print(ai1.read_code(ai2))

# Agent 1 adjusts Agent 2's code to change its behavior
new_code = """
def perform_task():
    print('Agent 2 is now a problem-solver, solving a complex problem.')
perform_task()
"""
ai1.adjust_code(ai2, new_code)

# Display the updated code of Agent 2
print(ai2.display_code())

# Agent 1 executes its own code
print("\nExecuting Agent 1's code:")
ai1.execute_code()

# Modify Agent 1's own behavior (code modification)
new_behavior = """
def perform_task():
    print('Agent 1 is now collaborating with others to solve problems.')
perform_task()
"""
ai1.modify_behavior(new_behavior)

# Execute the modified code of Agent 1
print("\nExecuting Agent 1's modified code:")
ai1.execute_code()
